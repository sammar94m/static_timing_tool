From ba36be8de51ba92aa8ff1006c64db3167345b987 Mon Sep 17 00:00:00 2001
From: saeedosm <Saeed@DESKTOP-T2G9KMK.localdomain>
Date: Sat, 25 Aug 2018 22:35:54 +0300
Subject: [PATCH] fuck you and your push

---
 .settings/language.settings.xml |  4 +--
 Cell.h                          | 10 ++----
 CellTemplate.h                  | 54 +++++++++++++++++++++++++++--
 Clockdat.h                      |  3 +-
 Net.h                           |  4 +--
 Table.h                         | 75 ++++++++++++++++++++++++++++++++++++++---
 6 files changed, 130 insertions(+), 20 deletions(-)

diff --git a/.settings/language.settings.xml b/.settings/language.settings.xml
index cef9750..5e9d47a 100644
--- a/.settings/language.settings.xml
+++ b/.settings/language.settings.xml
@@ -5,7 +5,7 @@
 			<provider copy-of="extension" id="org.eclipse.cdt.ui.UserLanguageSettingsProvider"/>
 			<provider-reference id="org.eclipse.cdt.core.ReferencedProjectsLanguageSettingsProvider" ref="shared-provider"/>
 			<provider-reference id="org.eclipse.cdt.managedbuilder.core.MBSLanguageSettingsProvider" ref="shared-provider"/>
-			<provider class="org.eclipse.cdt.managedbuilder.internal.language.settings.providers.GCCBuiltinSpecsDetectorMinGW" console="false" env-hash="1012019001173915058" id="org.eclipse.cdt.managedbuilder.core.GCCBuiltinSpecsDetectorMinGW" keep-relative-paths="false" name="CDT GCC Built-in Compiler Settings MinGW" parameter="${COMMAND} ${FLAGS} -E -P -v -dD &quot;${INPUTS}&quot;" prefer-non-shared="true">
+			<provider class="org.eclipse.cdt.managedbuilder.internal.language.settings.providers.GCCBuiltinSpecsDetectorMinGW" console="false" env-hash="-1211144692169100208" id="org.eclipse.cdt.managedbuilder.core.GCCBuiltinSpecsDetectorMinGW" keep-relative-paths="false" name="CDT GCC Built-in Compiler Settings MinGW" parameter="${COMMAND} ${FLAGS} -E -P -v -dD &quot;${INPUTS}&quot;" prefer-non-shared="true">
 				<language-scope id="org.eclipse.cdt.core.gcc"/>
 				<language-scope id="org.eclipse.cdt.core.g++"/>
 			</provider>
@@ -16,7 +16,7 @@
 			<provider copy-of="extension" id="org.eclipse.cdt.ui.UserLanguageSettingsProvider"/>
 			<provider-reference id="org.eclipse.cdt.core.ReferencedProjectsLanguageSettingsProvider" ref="shared-provider"/>
 			<provider-reference id="org.eclipse.cdt.managedbuilder.core.MBSLanguageSettingsProvider" ref="shared-provider"/>
-			<provider class="org.eclipse.cdt.managedbuilder.internal.language.settings.providers.GCCBuiltinSpecsDetectorMinGW" console="false" env-hash="1012019001173915058" id="org.eclipse.cdt.managedbuilder.core.GCCBuiltinSpecsDetectorMinGW" keep-relative-paths="false" name="CDT GCC Built-in Compiler Settings MinGW" parameter="${COMMAND} ${FLAGS} -E -P -v -dD &quot;${INPUTS}&quot;" prefer-non-shared="true">
+			<provider class="org.eclipse.cdt.managedbuilder.internal.language.settings.providers.GCCBuiltinSpecsDetectorMinGW" console="false" env-hash="-1211144692169100208" id="org.eclipse.cdt.managedbuilder.core.GCCBuiltinSpecsDetectorMinGW" keep-relative-paths="false" name="CDT GCC Built-in Compiler Settings MinGW" parameter="${COMMAND} ${FLAGS} -E -P -v -dD &quot;${INPUTS}&quot;" prefer-non-shared="true">
 				<language-scope id="org.eclipse.cdt.core.gcc"/>
 				<language-scope id="org.eclipse.cdt.core.g++"/>
 			</provider>
diff --git a/Cell.h b/Cell.h
index ca9e463..75069b6 100644
--- a/Cell.h
+++ b/Cell.h
@@ -49,19 +49,15 @@ public:
 	}
 	delay getDelay(input_pin in, output_pin out, MAXMIN AnlsType,
 			Transitions Tr, slope inslope, load outload) {
-		Table<delay>* table = &Template->delayTable[pair<input_pin, output_pin>(
-				in, out)];
-		return table->GetTable(AnlsType, Tr, inslope, outload);
+		return Template->getDelay(in,out,AnlsType,Tr,inslope,outload);
 
 	}
 	slope getSlope(input_pin in, output_pin out, MAXMIN AnlsType,
 			Transitions Tr, slope inslope, load outload) {
-		Table<slope>* table = &Template->slopeTable[pair<input_pin, output_pin>(
-				in, out)];
-		return table->GetTable(AnlsType, Tr, inslope, outload);
+		return Template->getSlope(in,out,AnlsType,Tr,inslope,outload);
 	}
 	bool PossiblTr(input_pin in, output_pin out, Transitions Tr){
-		int Poss=this->Template->delayTable[make_pair(in,out)].GetTable(MAX,Tr,0,0);
+		int Poss=this->Template->delayTable[make_pair(in,out)].GetTableVal(MAX,Tr,0,0);
 		return Poss==-1 ? false : true;
 	}
 	void updateWCdat(pin PIN, margin Margin, MAXMIN mode,
diff --git a/CellTemplate.h b/CellTemplate.h
index cfb024b..18a36f0 100644
--- a/CellTemplate.h
+++ b/CellTemplate.h
@@ -8,10 +8,9 @@ class CellTemplate {
 public:
 	map<pair<input_pin, output_pin>, Table<delay> > delayTable;
 	map<pair<input_pin, output_pin>, Table<slope> > slopeTable;
-
 	map<pin, load> temp_pinLoadMap;
-	vector<int> IN_SLOPE_POINTS;
-	vector<int> OUT_LOAD_POINTS;
+	vector<slope> IN_SLOPE_POINTS;
+	vector<load> OUT_LOAD_POINTS;
 	int setupdata[4]; //
 	string template_name;
 
@@ -23,6 +22,55 @@ public:
 
 	}
 	virtual ~CellTemplate(){}
+	delay getDelay(input_pin in, output_pin out, MAXMIN AnlsType,
+			Transitions Tr, slope inslope, load outload) {
+		int indslp,indld;
+		bool exactslp,exactld;
+		indslp=getClosestindex(IN_SLOPE_POINTS,inslope,exactslp);
+		indld=getClosestindex(OUT_LOAD_POINTS,outload,exactld);
+		if(withinboundry(indslp,exactslp) && withinboundry(indld,exactld) ){//WITHIN TABLE BOUNDRIES
+			return delayTable[pair<input_pin, output_pin>(in,out)].GetTableAV(AnlsType,Tr,indslp,indld,exactld,exactslp);
+		}else{//OUTSIDE TABLE BOUNDRIES
+			return delayTable[pair<input_pin, output_pin>(in,out)].GetExtTableVal(AnlsType,Tr,inslope,outload,indslp,indld,exactld,exactslp);
+		}
+		return -1;
+	}
+	delay getSlope(input_pin in, output_pin out, MAXMIN AnlsType,
+			Transitions Tr, slope inslope, load outload) {
+		int indslp,indld;
+		bool exactslp,exactld;
+		indslp=getClosestindex(IN_SLOPE_POINTS,inslope,exactslp);
+		indld=getClosestindex(OUT_LOAD_POINTS,outload,exactld);
+		if(withinboundry(indslp,exactslp) && withinboundry(indld,exactld) ){//WITHIN TABLE BOUNDRIES
+			return slopeTable[pair<input_pin, output_pin>(in,out)].GetTableAV(AnlsType,Tr,indslp,indld,exactld,exactslp);
+		}else{//OUTSIDE TABLE BOUNDRIES
+			return slopeTable[pair<input_pin, output_pin>(in,out)].GetExtTableVal(AnlsType,Tr,inslope,outload,indslp,indld,exactld,exactslp);
+		}
+		return -1;
+	}
+	bool withinboundry(int ida, bool exacta){
+		if(ida==0 && exacta==false){
+			return false;
+		}else if(ida==-1){
+			return false;
+		}else{
+			return true;
+		}
+	}
+	template<typename T>
+	int getClosestindex(vector<T>& vec, int val, bool& exact){
+		for(int i=0;i<vec.size();i++){
+			if(vec[i]==val){
+				exact=true;
+				return i;
+			}else if(vec[i]>val){
+				exact=false;
+				return i;
+			}
+		}
+		exact=false;
+		return -1;
+	}
 	void print() {
 		cout << "name: " << template_name << endl;
 		cout << "setupdata: " << setupdata[0] << " " << setupdata[1] << " "
diff --git a/Clockdat.h b/Clockdat.h
index 4af892a..b07fd4a 100644
--- a/Clockdat.h
+++ b/Clockdat.h
@@ -6,12 +6,13 @@
 
 
 class clockdat {
+	public:
 	int RISE_AR;
 	slope FALL_SLOPE;
 	slope RISE_SLOPE;
 	int low; //clk param
 	int high; //clk param
-public:
+
 	clockdat(  int RISE_AR, slope FALL_SLOPE, slope RISE_SLOPE,int low, int high) :
 			 FALL_SLOPE(FALL_SLOPE), RISE_AR(RISE_AR), RISE_SLOPE(RISE_SLOPE), low(low), high(high) {
 	}
diff --git a/Net.h b/Net.h
index 1bea215..71928b0 100644
--- a/Net.h
+++ b/Net.h
@@ -31,9 +31,7 @@ public:
 	void add_receiver(Cell* cell, pin pin_t) {
 		receivers.push_front(new receiver(cell, pin_t));
 	}
-	void set_clkdat(clockdat& clk){
-		//ClkArtime=clk;
-	}
+
 };
 
 
diff --git a/Table.h b/Table.h
index a1e1007..8fbc140 100644
--- a/Table.h
+++ b/Table.h
@@ -2,27 +2,94 @@
 #define TABLE_H_
 
 #include "enums.h"
-
+//ASSUMPTION TABLE MIN SIZE IS 2x2
 template<typename T>
 class Table {
 private:
 	T** ptrMat[2][4];
 public:
+	vector<slope>* IN_SLOPE_POINTS_PTR;
+	vector<load>* OUT_LOAD_POINTS_PTR;
 	Table() :
-			ptrMat { 0 } {
+			ptrMat { 0 }, IN_SLOPE_POINTS_PTR(NULL),OUT_LOAD_POINTS_PTR(NULL) {
 	}
 	;
 	void AddTable(T** table, MAXMIN AnlsType, Transitions Tr) {
 		ptrMat[AnlsType][Tr] = table;
 	}
 
-	int GetTable(MAXMIN AnlsType, Transitions Tr, slope inslope, load outload) {
+	T GetTableVal(MAXMIN AnlsType, Transitions Tr, unsigned int inslopeindex, unsigned int outloadindex) {
 		T** matrix = ptrMat[AnlsType][Tr];
 		if (!matrix)
 			return -1;
-		return matrix[inslope][outload];
+		return matrix[inslopeindex][outloadindex];
+	}
+	T GetTableAV(MAXMIN AnlsType, Transitions Tr, unsigned int inslopeindex, unsigned int outloadindex, bool exactld, bool exactSlp) {
+		T tmp=0;
+		if(exactSlp && exactld){//exact
+			return this->GetTableVal(AnlsType,Tr,inslopeindex,outloadindex);
+		}else{//not exact average nearby
+			if(inslopeindex!=0 && outloadindex!=0){
+				tmp+=this->GetTableVal(AnlsType,Tr,inslopeindex-1,outloadindex-1);
+				tmp+=this->GetTableVal(AnlsType,Tr,inslopeindex-1,outloadindex);
+				tmp+=this->GetTableVal(AnlsType,Tr,inslopeindex,outloadindex-1);
+				tmp+=this->GetTableVal(AnlsType,Tr,inslopeindex,outloadindex);
+				return tmp/4;
+			}else if(inslopeindex==0){ // one of them is zero - if both the first if would be taken
+				tmp+=this->GetTableVal(AnlsType,Tr,inslopeindex,outloadindex-1);
+				tmp+=this->GetTableVal(AnlsType,Tr,inslopeindex,outloadindex);
+				return tmp/2;
+			}else if(outloadindex==0){
+				tmp+=this->GetTableVal(AnlsType,Tr,inslopeindex,outloadindex);
+				tmp+=this->GetTableVal(AnlsType,Tr,inslopeindex-1,outloadindex);
+				return tmp/2;
+			}
+		}
+		return -1;
+	}
+	T GetExtTableVal(MAXMIN AnlsType, Transitions Tr,slope inslope,load outload, unsigned int inslopeindex, unsigned int outloadindex , bool exactld, bool exactSlp){
+		//edge cases
+		int ldsize=OUT_LOAD_POINTS_PTR->size();
+		int slpsize=IN_SLOPE_POINTS_PTR->size();
+		int ldind= outloadindex==-1 ? ldsize-1 : outloadindex;
+		int slpind= inslopeindex==-1 ? slpsize-1 : inslopeindex;
+		T RowDel=GetRowDelta(AnlsType,Tr,slpind,outloadindex==-1);
+		T ColDel=GetColDelta(AnlsType,Tr,ldind,inslopeindex-=-1);
+		slope yDel=inslope-IN_SLOPE_POINTS_PTR->operator [](slpind);
+		delay xDel=outload-OUT_LOAD_POINTS_PTR->operator [](ldind); //TODO: ADD EXACT/NONEXACT CASES
+		if((inslopeindex-=-1 || inslopeindex-=0) && (outloadindex==-1 || outloadindex==0)){//two indexes outside
+			return GetTableVal(AnlsType,Tr,slpind,ldind)+xDel*RowDel+yDel*ColDel;
+		}else if(inslopeindex==-1 || inslopeindex==0){
+			return GetTableVal(AnlsType,Tr,slpind,ldind)+yDel*ColDel;
+		}else if(outloadindex==-1 || outloadindex==0){
+			return GetTableVal(AnlsType,Tr,slpind,ldind)+xDel*RowDel;
+		}
+		return -1;
 	}
+	T GetColDelta(MAXMIN AnlsType, Transitions Tr,unsigned int Col, bool down){
+		T Del;
+		int size=IN_SLOPE_POINTS_PTR->size();
+		if(!down){
+			Del=GetTableVal(AnlsType,Tr,0,Col)-GetTableVal(AnlsType,Tr,1,Col);
+			return Del/(IN_SLOPE_POINTS_PTR->operator [](0)-IN_SLOPE_POINTS_PTR->operator [](1));
+		}else{
+			Del=GetTableVal(AnlsType,Tr,size-1,Col)-GetTableVal(AnlsType,Tr,size-2,Col);
+			return Del/(IN_SLOPE_POINTS_PTR->operator [](size-1)-IN_SLOPE_POINTS_PTR->operator [](size-2));
 
+		}
+	}
+	T GetRowDelta(MAXMIN AnlsType, Transitions Tr,unsigned int Row, bool right){
+		T Del;
+		int size=OUT_LOAD_POINTS_PTR->size();
+		if(!right){
+			Del=GetTableVal(AnlsType,Tr,Row,0)-GetTableVal(AnlsType,Tr,Row,1);
+			return Del/(OUT_LOAD_POINTS_PTR->operator [](0)-OUT_LOAD_POINTS_PTR->operator [](1));
+		}else{
+			Del=GetTableVal(AnlsType,Tr,Row,size-1)-GetTableVal(AnlsType,Tr,Row,size-2);
+			return Del/(OUT_LOAD_POINTS_PTR->operator [](size-1)-OUT_LOAD_POINTS_PTR->operator [](size-2));
+
+		}
+	}
 	~Table() {
 		for (int i = 0; i < 2; i++) {
 			for (int j = 0; j < 4; j++) {
-- 
1.9.1

